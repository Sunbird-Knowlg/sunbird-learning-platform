
input {
    file {
        start_position =>"beginning"
        type => "raw_event"    
        path => ["/data/logs/learning_telemetry_event_mw.log"]
        sincedb_path => "/home/learning/logstash-6.3.1/.sincedb_learning_telemetry_event_mw"
    }
    file {
        start_position =>"beginning"
        type => "raw_event"    
        path => ["/data/logs/language_telemetry_event_mw.log"]
        sincedb_path => "/home/learning/logstash-6.3.1/.sincedb_language_telemetry_event_mw"
    }
    file {
        start_position =>"beginning"
        type => "raw_event"    
        path => ["/data/logs/config_telemetry_event_mw.log"]
        sincedb_path => "/home/learning/logstash-6.3.1/.sincedb_config_telemetry_event_mw"
    }
    file {
        start_position =>"beginning"
        type => "raw_event"    
        path => ["/data/logs/search_telemetry_event_mw.log"]
        sincedb_path => "/home/learning/logstash-6.3.1/.sincedb_search_telemetry_event_mw"
    }
    file {
        start_position =>"beginning"
        type => "raw_event"    
        path => ["/data/logs/learning_service_mw.log"]
        sincedb_path => "/home/learning/logstash-6.3.1/.sincedb_learning_service_mw"
    }
    file {
        start_position =>"beginning"
        type => "graph_event"    
        path => ["/data/logs/learning_graph_event_mw.log"]
        sincedb_path => "/home/learning/logstash-6.3.1/.sincedb_learning_graph_event_mw"
    }
    file {
        start_position =>"beginning"
        type => "graph_event"
        path => ["/data/logs/language_graph_event_mw.log"]
        sincedb_path => "/home/learning/logstash-6.3.1/.sincedb_language_graph_event_mw"
    }
}

filter {
    grok {
      match => [ "message",
                "%{TIMESTAMP_ISO8601:timestamp} %{GREEDYDATA:msg}"]
    }
    mutate {
        gsub => [ "message","%{timestamp}","" ]
        strip => [ "message" ]
    }
    json {
        source => "message"
    }
}

output {
  if [type] == "graph_event" {
      kafka {
          bootstrap_servers => "{{ graphevent_kafka_url }}"
          codec => plain {
                  format => "%{message}"
            }
          message_key => "%{nodeUniqueId}"
          topic_id => "{{ graphevent_kafka_topic_id }}"
          retries => 20
          retry_backoff_ms => 180000
      }
  } else if [type] == "raw_event" {
      kafka {
          bootstrap_servers => "{{ graphevent_kafka_url }}"
          codec => plain {
                  format => "%{message}"
            }
          topic_id => "{{ rawtelemetry_event_topic_id }}"
          retries => 20
          retry_backoff_ms => 180000
      }
  }
}
