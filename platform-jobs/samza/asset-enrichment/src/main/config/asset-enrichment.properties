# Job
job.factory.class=org.apache.samza.job.yarn.YarnJobFactory
job.name=__env__.asset-enrichment

# YARN
yarn.package.path=http://__yarn_host__:__yarn_port__/__env__/${project.artifactId}-${pom.version}-distribution.tar.gz

# Metrics
metrics.reporters=snapshot,jmx
metrics.reporter.snapshot.class=org.apache.samza.metrics.reporter.MetricsSnapshotReporterFactory
metrics.reporter.snapshot.stream=kafka.__env__.metrics
metrics.reporter.jmx.class=org.apache.samza.metrics.reporter.JmxReporterFactory

# Task
task.class=org.sunbird.jobs.samza.task.AssetEnrichmentTask
task.inputs=kafka.__env__.learning.job.request
task.checkpoint.factory=org.apache.samza.checkpoint.kafka.KafkaCheckpointManagerFactory
task.checkpoint.system=kafka
task.checkpoint.replication.factor=__samza_checkpoint_replication_factor__
task.commit.ms=60000
task.window.ms=300000
task.opts=-Dfile.encoding=UTF8
task.broadcast.inputs=kafka.__env__.system.command#0

# Serializers
serializers.registry.json.class=org.sunbird.jobs.samza.serializers.EkstepJsonSerdeFactory
serializers.registry.metrics.class=org.apache.samza.serializers.MetricsSnapshotSerdeFactory

# Systems
systems.kafka.samza.factory=org.apache.samza.system.kafka.KafkaSystemFactory
systems.kafka.samza.msg.serde=json
systems.kafka.streams.metrics.samza.msg.serde=metrics
systems.kafka.consumer.zookeeper.connect=__zookeepers__
systems.kafka.consumer.auto.offset.reset=smallest
systems.kafka.samza.offset.default=oldest
systems.kafka.producer.bootstrap.servers=__kafka_brokers__


# Job Coordinator
job.coordinator.system=kafka
# Normally, this would be 3, but we have only one broker.
job.coordinator.replication.factor=__samza_coordinator_replication_factor__

# Job specific config properties
google.vision.tagging.enabled=__google_vision_tagging__
redis.host=__redis_host__
redis.port=__redis_port__
redis.maxConnections=128
akka.request_timeout=30
environment.id=__environment_id__
graph.passport.key.base=__graph_passport_key__
route.domain=__lp_bolt_url__
route.bolt.read.domain=__lp_bolt_read_url__
route.bolt.write.domain=__lp_bolt_write_url__
route.all=__other_bolt_url__
route.bolt.read.all=__other_bolt_read_url__
route.bolt.write.all=__other_bolt_write_url__
shard.id=__mw_shard_id__
graph.dir="/data/graphDB"
graph.ids=["domain","language","en","hi","ka","te","ta"]
platform.auth.check.enabled=false
platform.cache.ttl=3600000

kafka.topics.backend.telemetry=__env__.telemetry.raw
kafka.topics.failed=__env__.learning.job.request


#Current environment
cloud_storage.env=__cloud_storage_config_environment__

#Folder configuration
cloud_storage.content.folder=content
cloud_storage.asset.folder=assets
cloud_storage.artefact.folder=artifact
cloud_storage.bundle.folder=bundle
cloud_storage.media.folder=media
cloud_storage.ecar.folder=ecar_files
cloud_storage.upload.url.ttl=600


# Media download configuration
content.media.base.url=__content_media_base_url__
plugin.media.base.url=__plugin_media_base_url__
lp.tempfile.location=__lp_tmpfile_location__

# Metrics
output.metrics.job.name=asset-enrichment
output.metrics.topic.name=__env__.pipeline_metrics

telemetry_env=__env_name__
installation.id=__installation_id__

# Cloud store details
cloud_storage_type=__cloud_storage_type__
azure_storage_key=__azure_storage_key__
azure_storage_secret=__azure_storage_secret__
azure_storage_container=__azure_storage_container__
aws_storage_key=__aws_access_key_id__
aws_storage_secret=__aws_secret_access_key__
aws_storage_container=__aws_storage_container__

cephs3_storage_key=__cephs3_access_key_id__
cephs3_storage_secret=__cephs3_secret_access_key__
cephs3_storage_container=__cephs3_storage_container__
cephs3_storage_endpoint=__cephs3_storage_endpoint__

# Configuration for default channel ID
channel.default=in.ekstep

#restrict.metadata.objectTypes=Content,ContentImage

kafka.topic.system.command=__env__.system.command

#Streamable media type list
content.streaming_enabled=__content_streaming_enabled__
stream.mime.type=__streaming_mime_type__
stream.keyspace.name=__env___platform_db
stream.keyspace.table=job_request

cassandra.lp.connection=__cassandra_lp_connection__
cassandra.lpa.connection=__cassandra_lpa_connection__

learning.content.youtube.application.name=fetch-youtube-license
learning_content_youtube_apikey=__youtube_api_key__

# Max number of sample thumbnail to be generated from video
max.sample.thumbnail.image=5
# Max size(width/height) of thumbnail in pixels
max.thumbnail.size.pixels=150

# For enabling transfer of content from one path to other
content.upload.context.driven=true