# This is the main configuration file for the application.
# https://www.playframework.com/documentation/latest/ConfigFile
# ~~~~~

## Akka
# https://www.playframework.com/documentation/latest/JavaAkka#Configuration
# ~~~~~
akka {
loggers =["akka.event.Logging$DefaultLogger"]
#log-config-on-start = true
}
include "akka.conf"
## Secret key
# http://www.playframework.com/documentation/latest/ApplicationSecret
# ~~~~~
#play.crypto.secret = "changeme"


## Internationalisation
# https://www.playframework.com/documentation/latest/JavaI18N
# ~~~~~
play.i18n {
  # The application languages
  langs = [ "en" ]
}

## Play HTTP settings
# ~~~~~
play.http {
  ## Router
  # https://www.playframework.com/documentation/latest/JavaRouting
  # https://www.playframework.com/documentation/latest/ScalaRouting
  # ~~~~~
  # Define the Router object to use for this application.
  # This router will be looked up first when the application is starting up,
  # so make sure this is the entry point.
  # Furthermore, it's assumed your route file is named properly.
  # So for an application router like `my.application.Router`,
  # you may need to define a router file `conf/my.application.routes`.
  # Default to Routes in the root package (aka "apps" folder) (and conf/routes)
  #router = my.application.Router

}

## Netty Provider
# ~~~~~
play.server.netty {
  # If you run Play on Linux, you can use Netty's native socket transport
  # for higher performance with less garbage.
  #transport = "native"
}

## WS (HTTP Client)
# ~~~~~
libraryDependencies += javaWs 

## Cache
# https://www.playframework.com/documentation/latest/JavaCache
# https://www.playframework.com/documentation/latest/ScalaCache
# ~~~~~
# Play comes with an integrated cache API that can reduce the operational
# overhead of repeated requests. You must enable this by adding to build.sbt:
#
libraryDependencies += cache
#
play.cache {
  # If you want to bind several caches, you can bind the individually
  #bindCaches = ["db-cache", "user-cache", "session-cache"]
}

play.http.filters=filters.GZipFilter

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

# APP Specific config
# ~~~~~
# Application specific configurations can be provided here

# Path for elasticsearch.properties file
search.config.path=/home/learning/platform/search

# Cache-Manager Configuration
cache.type="redis"

#search.es_conn_info="10.6.0.11:9200"
search.es_conn_info="localhost:9200"
search.fields.query=["name^100","title^100","lemma^100","code^100","tags^100","question^100","domain","subject","description^10","keywords^25","ageGroup^10","filter^10","theme^10","genre^10","objects^25","contentType^100","language^200","teachingMode^25","skills^10","learningObjective^10","curriculum^100","gradeLevel^100","developer^100","attributions^10","owner^50","text","words","releaseNotes","body"]
search.fields.date=["lastUpdatedOn","createdOn","versionDate","lastSubmittedOn","lastPublishedOn"]
search.fields.mode_collection=["identifier","name","objectType","contentType","mimeType","size","childNodes"]
search.batch.size=500
search.connection.timeout=30

platform-api-url="http://localhost:8080/learning-service"
language.map={"Hindi":"hi", "English":"en", "Telugu":"te", "Kannada":"ka", "Tamil":"ta", "Assamese":"as", "Bengali":"bn", "Bodo":"bo", "Gujarati":"gu", "Konkani":"ko", "Malayalam":"ml", "Marathi":"mr", "Nepali":"ne", "Odia":"or", "Punjabi":"pj", "Sanskrit":"sk"}
#Top N Config for Search Telemetry
telemetry.search.topn=5
telemetry_env=dev
installation.id=ekstep

# Configuration for default channel ID
channel.default="in.ekstep"
ekstepPlatformApiUserId="search-service"