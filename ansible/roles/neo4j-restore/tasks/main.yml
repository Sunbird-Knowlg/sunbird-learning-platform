- name: ensure restore dir exists
  file: path="{{ neo4j_restore_dir }}" state=directory owner={{ learner_user }} group={{ learner_user }}

- set_fact:
    neo4j_restore_gzip_file_path: "{{ neo4j_restore_dir }}/{{ neo4j_restore_gzip_file_name }}"

- name: Download restore file from azure
  command: az storage blob download --container-name {{ neo4j_backup_azure_container_name }} --name {{ neo4j_restore_gzip_file_name }} --file {{ neo4j_restore_gzip_file_path }}
  environment:
    AZURE_STORAGE_ACCOUNT: "{{ backup_azure_storage_account_name }}"
    AZURE_STORAGE_KEY: "{{ backup_azure_storage_access_key }}"
  async: 3600
  poll: 10

- name: Check if neo4j is running
  become_user: "{{ learner_user }}"
  shell: ps -ef | grep "{{ neo4j_home }}"  | grep -v grep | wc -l
  register: neo4j_process
          
- name: stop the neo4j
  become: yes
  become_user: "{{ learner_user }}"
  shell:  bin/neo4j stop
  args:
    chdir: "{{ neo4j_home }}"
  when: "neo4j_process.stdout != '0'"

- name: unzip 
  become: yes
  become_user: "{{learner_user}}"
  unarchive: src={{neo4j_restore_gzip_file_path}} dest={{learner_user_home}} copy=no group={{learner_user}} owner={{learner_user}}

- name: delete existing graph db
  become: yes
  file:
    state: absent
    path: "{{ path_to_neo4j_db }}/graph.db"

- name: move graph db to database folder
  become: yes
  become_user: "{{learner_user}}"
  command: mv {{learner_user_home}}/learning_graph {{path_to_neo4j_db}}/graph.db

- name: Start neo4j
  become: yes
  become_user: "{{ learner_user }}"
  shell:  bin/neo4j start
  args:
    chdir: "{{ neo4j_home }}"

- name: delete restore directory
  become: yes
  file:
    state: absent
    path: "{{ neo4j_restore_dir }}"

