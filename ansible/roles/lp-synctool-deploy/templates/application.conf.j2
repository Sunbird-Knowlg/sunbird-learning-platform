SyncActorSystem{
  akka {
    actor {
      default-dispatcher {
          type = "Dispatcher"
        executor = "fork-join-executor"
        fork-join-executor {
            parallelism-min = 1
            parallelism-factor = 2.0
            parallelism-max = 4
        }
          # Throughput for default Dispatcher, set to 1 for as fair as possible
          throughput = 1
      }
    }
  }
}

# Redis Configuration
redis.host="{{ redis_host }}"
redis.port={{ redis_port }}
redis.maxConnections=128

# Neo4j Graph Configuration
graph.dir="/data/graphDB"
akka.request_timeout=30
environment.id={{ environment_id }}
graph.passport.key.base="{{ graph_passport_key }}"
route.domain="{{ learning_neo4j_bolt_url }}"
route.bolt.read.domain="{{ learning_read_elb_url }}"
route.bolt.write.domain="{{ learning_write_elb_url }}"
route.all="{{ language_neo4j_bolt_url }}"
route.bolt.read.all="{{ language_read_elb_url }}"
route.bolt.write.all="{{ language_write_elb_url }}"
platform.auth.check.enabled=false
platform.cache.ttl=3600000

telemetry_env={{instance}}
batch.size=100

# Elastic Search Configuration
search.es_conn_info="{{ search_index_host }}"
search.fields.query=["name^100","title^100","lemma^100","code^100","tags^100","domain","subject","description^10","keywords^25","ageGroup^10","filter^10","theme^10","genre^10","objects^25","contentType^100","language^200","teachingMode^25","skills^10","learningObjective^10","curriculum^100","gradeLevel^100","developer^100","attributions^10","owner^50","text","words","releaseNotes"]
search.fields.date=["lastUpdatedOn","createdOn","versionDate","lastSubmittedOn","lastPublishedOn"]
search.batch.size=500
search.connection.timeout=30
search.index.name="{{ compositesearch_index_name }}"

nested.fields=["badgeAssertions", "targets", "badgeAssociations", "plugins", "me_totalTimeSpent", "me_totalPlaySessionCount", "me_totalTimeSpentInSec", "batches", "trackable", "credentials", "discussionForum", "provider", "osMetadata", "actions", "transcripts", "accessibility"]
channel.default="in.ekstep"

# Cassandra Configurations
hierarchy.keyspace.name="{{ hierarchy_keyspace_name }}"
content.hierarchy.table="content_hierarchy"
content.keyspace.name="{{ content_keyspace_name }}"
cassandra.lp.connection="{{ lp_cassandra_connection }}"
assessment.keyspace.name="{{ content_keyspace_name }}"
assessment.keyspace.table="question_data"
# Dialcodes service specific configuration
dialcode.keyspace.name="{{ sunbirddev_dialcode_store }}"
dialcode.table="dial_code"

#Filter metadata based on definition while indexing into ES
#restrict.metadata.objectTypes="Content,ContentImage"

#Content relationship properties, to be used for units
content.relationship.properties="collections,usedByContent,concepts,questions,item_sets,methods,usesContent,children,libraries"


cassandra.connection.platform_courses="{{ core_cassandra_connection }}"
courses.keyspace.name="sunbird_courses"
courses.topic="{{ env }}.coursebatch.job.request"
kafka.urls="{{ graphevent_kafka_url }}"

content.postpublish.topic="{{ env }}.content.postpublish.request"

search.lms_es_conn_info="{{ search_lms_index_host }}"

#Cloud Storage details
cloud_storage_type="{{ cloud_service_provider }}"
cloud_storage_key="{{ cloud_public_storage_accountname }}"
cloud_storage_secret="{{ cloud_public_storage_secret }}"
cloud_storage_container="{{ cloud_storage_content_bucketname }}"

contentTypeToPrimaryCategory {
  ClassroomTeachingVideo: "Explanation Content"
  ConceptMap: "Learning Resource"
  Course: "Course"
  CuriosityQuestionSet: "Practice Question Set"
  eTextBook: "eTextbook"
  ExperientialResource: "Learning Resource"
  ExplanationResource: "Explanation Content"
  ExplanationVideo: "Explanation Content"
  FocusSpot: "Teacher Resource"
  LearningOutcomeDefinition: "Teacher Resource"
  MarkingSchemeRubric: "Teacher Resource"
  PedagogyFlow: "Teacher Resource"
  PracticeQuestionSet: "Practice Question Set"
  PracticeResource: "Practice Question Set"
  SelfAssess: "Course Assessment"
  TeachingMethod: "Teacher Resource"
  TextBook: "Digital Textbook"
  Collection: "Content Playlist"
  ExplanationReadingMaterial: "Learning Resource"
  LearningActivity: "Learning Resource"
  LessonPlan: "Content Playlist"
  LessonPlanResource: "Teacher Resource"
  PreviousBoardExamPapers: "Learning Resource"
  TVLesson: "Explanation Content"
  OnboardingResource: "Learning Resource"
  ReadingMaterial: "Learning Resource"
  Template: "Template"
  Asset: "Asset"
  Plugin: "Plugin"
  LessonPlanUnit: "Lesson Plan Unit"
  CourseUnit: "Course Unit"
  TextBookUnit: "Textbook Unit"
}
csp.migration.request.topic="{{ csp_migration_topic_name }}"
csp.migration.batch.size={{ csp_migration_batch_size }}
is_replace_string={{ sync_tool_is_replace_string | default('false') }}
replace_src_string= "{{ sync_tool_replace_src_string | default('') }}"
replace_dest_string="{{ sync_tool_replace_dest_string | default('') }}"