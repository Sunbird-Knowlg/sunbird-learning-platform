- name: Copy the cassandra restore script
  copy: src=cassandra-restore.py dest="{{restore_path}}"  mode="u=rwx,g=rx,o=r"
  become_user: "{{user}}"

- set_fact:
    cassandra_restore_gzip_file_path: "{{ restore_path }}/{{ cassandra_restore_file_name }}"

- name: download a file from azure storage
  become: true
  include_role:
    name: azure-cloud-storage
    tasks_from: blob-download.yml
  vars:
    blob_container_name: "{{ cloud_storage_cassandrabackup_foldername }}"
    blob_file_name: "{{ cassandra_restore_file_name }}"
    local_file_or_folder_path: "{{restore_path}}/{{ cassandra_restore_file_name }}"
    storage_account_name: "{{ cloud_management_storage_accountname }}"
    storage_account_key: "{{ cloud_management_storage_secret }}"
  when: cloud_service_provider == "azure"

- name: download a file from aws s3
  become: true
  include_role:
    name: aws-cloud-storage
    tasks_from: download.yml
  vars:
    s3_bucket_name: "{{ cloud_storage_cassandrabackup_bucketname }}"
    aws_access_key_id: "{{ cloud_management_storage_accountname }}"
    aws_secret_access_key: "{{ cloud_management_storage_secret }}"
    aws_default_region: "{{ cloud_public_storage_region }}"
    local_file_or_folder_path: "{{restore_path}}/{{ cassandra_restore_file_name }}"
    s3_path: "{{ cloud_storage_cassandrabackup_foldername }}/{{ cassandra_restore_file_name }}"
  when: cloud_service_provider == "aws"  

- name: download file from gcloud storage
  include_role:
    name: gcp-cloud-storage
    tasks_from: download.yml
  vars:
    gcp_storage_service_account_name: "{{ cloud_management_storage_accountname }}"
    gcp_storage_key_file: "{{ cloud_management_storage_secret }}"
    gcp_bucket_name: "{{ cloud_storage_cassandrabackup_bucketname }}"
    gcp_path: "{{ cloud_storage_cassandrabackup_foldername }}/{{ cassandra_restore_file_name }}"
    local_file_or_folder_path: "{{restore_path}}/{{ cassandra_restore_file_name }}"
  when: cloud_service_provider == "gcloud"

- name: unarchieve backup file
  unarchive: src={{restore_path}}/{{ cassandra_restore_file_name }} dest={{restore_path}}/ copy=no
  become_user: "{{user}}"

- name: create the keyspaces
  shell: cqlsh -f {{ backup_dir }}/db_schema.cql
  become_user: "{{user}}"
  ignore_errors: yes

- name: restoring the data
  shell: python {{ restore_path }}/cassandra-restore.py --snapshotdir {{backup_folder_name}}/{{item}}
  register: output
  become_user: "{{user}}"
  with_items: "{{keyspace_names.split(',')|list}}"
  args:
   chdir: "/home/{{user}}"

- name: clean up backup dir after restore
  file: path={{ item }} state=absent
  with_items:
     - "{{ backup_dir }}"
     - "/home/{{user}}/{{ cassandra_restore_file_name }}"
