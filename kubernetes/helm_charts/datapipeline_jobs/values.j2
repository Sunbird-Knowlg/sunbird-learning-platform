namespace: {{ flink_namespace }}
imagepullsecrets: {{ imagepullsecrets }}
dockerhub: {{ dockerhub }}
repository: {{flink_repository|default('knowledge-platform-jobs')}}
image_tag: {{ image_tag }}
azure_account: {{ azure_account }}
azure_secret: {{ azure_secret }}

replicaCount: {{taskmana_replicacount|default(1)}}

jobmanager:
  rpc_port: {{ jobmanager_rpc_port }}
  blob_port: {{ jobmanager_blob_port }}
  query_port: {{ jobmanager_query_port }}
  ui_port: {{ jobmanager_ui_port }}
  prom_port: {{ jobmanager_prom_port }}
  heap_memory: {{ jobmanager_heap_memory }}

service: {{ jobmanager_ui_service|to_json }}

rest_port: {{ jobmanager_ui_rest_port }}
resttcp_port: {{ jobmanager_ui_tcp_port }}

taskmanager:
  prom_port: {{ taskmanager_prom_port }}
  rpc_port: {{ taskmanager_rpc_port }}
  heap_memory: {{ taskmanager_heap_memory }}
  replicas: {{taskmanager_replicacount|default(1)}}

job_classname: {{ job_classname }}
{{ taskmanager_liveness | to_nice_yaml }}


base_config: |
  kafka {
      broker-servers = "{{ kafka_brokers }}"
      zookeeper = "{{ zookeepers }}"
      producer {
        max-request-size = {{ producer_max_request_size }}
      }
    }
    job {
      env = "{{ env_name }}"
      enable.distributed.checkpointing = true
      statebackend {
        blob {
          storage {
            account = "{{ azure_account }}.blob.core.windows.net"
            container = "{{ flink_container_name }}"
            checkpointing.dir = "checkpoint"
          }
        }
        base.url = "wasbs://"${job.statebackend.blob.storage.container}"@"${job.statebackend.blob.storage.account}"/"${job.statebackend.blob.storage.checkpointing.dir}
      }
    }
    task {
      parallelism = 1
      consumer {
        parallelism = 1
      }
      checkpointing.interval = {{ checkpoint_interval }}
      restart-strategy.attempts = {{ restart_attempts }}
      restart-strategy.delay = {{ restart_delay }} # in milli-seconds
    }
    redis {
      host = {{ dp_redis_host }}
      port = 6379
    }
    lms-cassandra {
      host = "{{ core_cassandra_connection_ip }}"
      port = "9042"
    }
    neo4j {
      routePath = "{{ neo4j_route_path }}"
      graph = "domain"
    }

activity-aggregate-updater: |
  include file("/data/flink/conf/base-config.conf")
  kafka {
    input.topic = {{ env_name }}.coursebatch.job.request
    output.audit.topic = {{ env_name }}.telemetry.raw
    output.failed.topic = {{ env_name }}.activity.agg.failed
    groupId = {{ env_name }}-activity-aggregate-group
  }
  task {
    checkpointing.interval = 300000
    restart-strategy.attempts = {{ restart_attempts }}
    restart-strategy.delay = 240000 # in milli-seconds
    consumer.parallelism = {{ activity_agg_consumer_parallelism }}
    activity.agg.parallelism = {{ activity_agg_parallelism }}
  }
  lms-cassandra {
      keyspace = "{{ middleware_course_keyspace }}"
      consumption.table = "{{ middleware_consumption_table }}"
      user_activity_agg.table = "{{ middleware_user_activity_agg_table }}"
    }
  redis {
      database {
        relationCache.id = 10
      }
    }
  threshold.batch.read.interval = 60 
  threshold.batch.read.size = 1000
  threshold.batch.write.size = 10  

relation-cache-updater: |
  include file("/data/flink/conf/base-config.conf")
  kafka {
    input.topic = {{ env_name }}.content.postpublish.request
    groupId = {{ env_name }}-relation-cache-updater-group
  }
  task {
    consumer.parallelism = {{ relation_cache_updater_consumer_parallelism }}
    parallelism = {{ relation_cache_updater_parallelism }}
  }
  lms-cassandra {
        keyspace = "{{ middleware_hierarchy_keyspace }}"
        table = "{{ middleware_content_hierarchy_table }}"
    }
  redis {
    database {
      relationCache.id = 10
      collectionCache.id = 5
    }
  }

post-publish-processor: |
  include file("/data/flink/conf/base-config.conf")
  kafka {
    input.topic = {{ env_name }}.content.postpublish.request
    groupId = {{ env_name }}-post-publish-processor-group
    publish.topic = {{ env_name }}.learning.job.request
  }
  task {
    consumer.parallelism = {{ post_publish_processor_consumer_parallesim }}
    parallelism = {{ post_publish_processor_parallelism }}
    router.parallelism = {{ post_publish_event_router_parallelism }}
  }
  lms-cassandra {
    keyspace = "{{ middleware_course_keyspace }}"
    batchTable = "course_batch"
  }
  content {
    search {
      basePath = "{{ kp_search_service_base_url }}"
    }
  }
  lms {
    basePath = "{{ lms_service_base_url }}"
  }
