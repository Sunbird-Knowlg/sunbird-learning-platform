@Library('deploy-conf') _
node() {
    try {
        String ANSI_GREEN = "\u001B[32m"
        String ANSI_NORMAL = "\u001B[0m"
        String ANSI_BOLD = "\u001B[1m"
        String ANSI_RED = "\u001B[31m"
        String ANSI_YELLOW = "\u001B[33m"

        stage('checkout public repo') {
            cleanWs()
            checkout scm
        }
        stage('define params') {
            def values = lp_dp_params()
            if(values == "first run"){
                // Override default parameters
                envDir = sh(returnStdout: true, script: "echo $JOB_NAME").split('/')[-2].trim()
                properties([[$class: 'RebuildSettings', autoRebuild: false, rebuildDisabled: false], parameters([
                        choice(choices: ['GitHub', 'Local'], description: '<font color=teal size=2>Choose the ansible inventory source</font>', name: 'inventory_source'),
                        string(defaultValue: "${WORKSPACE}/private/ansible/inventories/${envDir}", description: '<font color=teal size=2>Please sepecify the full path to the inventory directory. The default value is $WORKSPACE/private/ansible/env. Here env is the previous directory of the job.</font>', name: 'inventory_path', trim: false),
                        string(defaultValue: '', description: '', name: 'host', trim: false),
                        string(defaultValue: '', description: '', name: 'version', trim: false)])])
                currentBuild.result = 'SUCCESS'
                return
            }

            ansiColor('xterm') {
                stage('deploy'){
                    ansiblePlaybook = "${currentWs}/devops/lp_samza_telemetry_schemas.yml"
                    ansibleExtraArgs = """--extra-vars "host=${params.host} version=${params.version}"  --vault-password-file /home/ops/vault"""
                    values.put('ansiblePlaybook', ansiblePlaybook)
                    values.put('ansibleExtraArgs', ansibleExtraArgs)
                    println values
//                    ansible_playbook_run(values)
                }
            }
        }
    }
    catch (err) {
        throw err
    }
}
