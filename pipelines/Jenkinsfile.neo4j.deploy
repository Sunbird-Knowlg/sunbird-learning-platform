@Library('deploy-conf') _
node() {
    try {
        String ANSI_GREEN = "\u001B[32m"
        String ANSI_NORMAL = "\u001B[0m"
        String ANSI_BOLD = "\u001B[1m"
        String ANSI_RED = "\u001B[31m"
        String ANSI_YELLOW = "\u001B[33m"

        stage('checkout public repo') {
            cleanWs()
            checkout scm
        }
        stage('define params') {
            def values = lp_dp_params()
            if(values == "first run"){
                envDir = sh(returnStdout: true, script: "echo $JOB_NAME").split('/')[-2].trim()
                properties([[$class: 'RebuildSettings', autoRebuild: false, rebuildDisabled: false], parameters([string(defaultValue: '',
                        description: '<font color=teal size=2>Please specify the absolute path to the job from which the metadata.json will be copied.</font>',
                        name: 'copy_metadata_from', trim: false), string(defaultValue: 'lastSuccessfulBuild',
                        description: '<font color=teal size=2>Specify the build number to copy the artifact from. Default is last successful build. The artifact from this build_number will be ignored if artifact source is Remote.</font>',
                        name: 'build_number', trim: false), choice(choices: ['Remote', 'Local'], description: '<font color=teal size=2>Choose the artifact source. Remote will use artifact_version and Local will use build_number.</font>',
                        name: 'artifact_source'), string(defaultValue: '', description: '<font color=teal size=2>This field is used only if artifact_source is Remote. If blank, artifact_version will be picked from metedata.json. If not blank, specified version will be downloaded from Remote.</font>',
                        name: 'artifact_version', trim: false), choice(choices: ['GitHub', 'Local'], description: '<font color=teal size=2>Choose the ansible inventory source</font>',
                        name: 'inventory_source'), string(defaultValue: "$WORKSPACE/private/ansible/inventories/$envDir",
                        description: '<font color=teal size=2>Please sepecify the full path to the inventory directory. The default value is $WORKSPACE/private/ansible/env. Here env is the previous directory of the job.</font>',
                        name: 'inventory_path', trim: false), string(defaultValue: '', description: '<font color=teal size=2>If inventory_source is Local, specify full path including file name to the neo4j*.tar.gz file. If inventory_source is GitHub, place the neo4j*.tar.gz file in a directory named artifacts under root directory.</font>', name: 'neo4j_source', trim: false)])])
                currentBuild.result = 'SUCCESS'
                return
            }
            ansiColor('xterm') {
                stage('get artifact') {
                    currentWs = sh(returnStdout: true, script: 'pwd').trim()
                    artifact = values.artifact_name + ":" + values.artifact_version
                    values.put('currentWs', currentWs)
                    if (params.artifact_source == "Remote") {
                        println(ANSI_BOLD + ANSI_YELLOW + '''\
                    Option chosen is Remote, ignoring any previously copied artifacts and new artifacts will be downloaded from remote source
                    '''.stripIndent().replace("\n", " ") + ANSI_NORMAL)
                        ansiblePlaybook = "${currentWs}/devops/artifacts-download.yml"
                        ansibleExtraArgs = """\
                               --extra-vars "artifact=${artifact}
                               artifact_path=${currentWs}/${artifact}"
                               --vault-password-file /home/ops/vault
                               """.stripIndent().replace("\n", " ")
                        values.put('ansiblePlaybook', ansiblePlaybook)
                        values.put('ansibleExtraArgs', ansibleExtraArgs)
                        ansible_playbook_run(values)
                    }
                    else{
                        println(ANSI_BOLD + ANSI_YELLOW + '''\
                    Option chosen is Local, using the artifacts copied 
                    '''.stripIndent().replace("\n", " ") + ANSI_NORMAL)
                    }
                }
                stage('deploy artifact'){
                    sh """
                       unzip ${artifact}
                       mv learning-graph-extension-*.jar devops
                       mv custom-procedures*.jar devops
                    """
                    ansiblePlaybook = "${currentWs}/devops/lp_learning_neo4j_deploy.yml"
                    ansibleExtraArgs = "--syntax-check"
                    values.put('ansiblePlaybook', ansiblePlaybook)
                    values.put('ansibleExtraArgs', ansibleExtraArgs)
                    println values
                    ansible_playbook_run(values)

                    if (params.inventory_source == "GitHub")
                        sh "cp private/artifacts/neo4j-*.tar.gz devops/artifacts"
                    else
                        sh "cp ${params.neo4j_source} devops/artifacts"

                    ansibleExtraArgs = ""
                    values.put('ansibleExtraArgs', ansibleExtraArgs)
                    println values
//                    ansible_playbook_run(values)
                    archiveArtifacts artifacts: "${artifact}", fingerprint: true, onlyIfSuccessful: true
                    archiveArtifacts artifacts: 'metadata.json', onlyIfSuccessful: true
                    currentBuild.description = "${values.artifact_version}"
                }
            }
        }
    }
    catch (err) {
        currentBuild.result = "FAILURE"
        throw err
    }
}
