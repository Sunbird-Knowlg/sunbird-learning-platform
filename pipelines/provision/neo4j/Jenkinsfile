@Library('deploy-conf') _
node() {
    try {
        String ANSI_GREEN = "\u001B[32m"
        String ANSI_NORMAL = "\u001B[0m"
        String ANSI_BOLD = "\u001B[1m"
        String ANSI_RED = "\u001B[31m"
        String ANSI_YELLOW = "\u001B[33m"


        stage('checkout public repo') {
            cleanWs()
            checkout scm
        }

        ansiColor('xterm') {
            stage('deploy'){
                values = [:]
                currentWs = sh(returnStdout: true, script: 'pwd').trim()
                envDir = sh(returnStdout: true, script: "echo $JOB_NAME").split('/')[-3].trim()
                module = sh(returnStdout: true, script: "echo $JOB_NAME").split('/')[-2].trim()
                jobName = sh(returnStdout: true, script: "echo $JOB_NAME").split('/')[-1].trim()
		dir('private'){
                checkout scm: [$class: 'GitSCM', branches: [[name: private_repo_branch]], extensions: [[$class: 'GitLFSPull'], [$class: 'CloneOption', depth: 1, noTags: true, reference: '', shallow: true]], userRemoteConfigs: [[credentialsId: private_repo_credentials, url: private_repo_url]]]
		}
                fileExists = sh(returnStdout: true, script: "find ${currentWs} -name 'neo4j*.tar.gz'")
                  if (fileExists != "")
                      sh "cp private/artifacts/neo4j*.tar.gz ansible/artifacts"
                  else {
                      println(ANSI_BOLD + ANSI_RED + "Uh Oh! Unable to find neo4j*.tar.gz. Please place this file in your private repo under artifact directory" + ANSI_NORMAL)
                      error 'Please resolve the errors and rerun..'
_                 }
                ansiblePlaybook = "${currentWs}/ansible/lp_learning_neo4j_provision.yml"
                ansibleExtraArgs = "--vault-password-file /var/lib/jenkins/secrets/vault-pass"
                values.put('currentWs', currentWs)
                values.put('env', envDir)
                values.put('module', module)
                values.put('jobName', jobName)
                values.put('ansiblePlaybook', ansiblePlaybook)
                values.put('ansibleExtraArgs', ansibleExtraArgs)
                println values
                ansible_playbook_run(values)
                currentBuild.result = "SUCCESS"
                currentBuild.description = "Artifact: ${values.artifact_version}, Private: ${params.private_branch}, Public: ${params.branch_or_tag}"
             }
        }
    }
    catch (err) {
        currentBuild.result = "FAILURE"
        throw err
    }
    finally {
        slack_notify(currentBuild.result)
        email_notify()
    }
}