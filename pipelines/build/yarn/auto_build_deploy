@Library('deploy-conf') _
node() {
    try {
        String ANSI_GREEN = "\u001B[32m"
        String ANSI_NORMAL = "\u001B[0m"
        String ANSI_BOLD = "\u001B[1m"
        String ANSI_RED = "\u001B[31m"
        String ANSI_YELLOW = "\u001B[33m"
        
        ansiColor('xterm') {
            stage('Checkout') {
                tag_name = env.JOB_NAME.split("/")[-1]
                module = env.JOB_NAME.split("/")[-3]
                envDir = env.JOB_NAME.split("/")[-4]
                pre_checks()
                cleanWs()
                def scmVars = checkout scm
                checkout scm: [$class: 'GitSCM', branches: [[name: "refs/tags/$tag_name"]], userRemoteConfigs: [[url: scmVars.GIT_URL]]]
                commit_hash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                artifact_version = tag_name + "_" + commit_hash
                echo "artifact_version: "+ artifact_version
            }
        }
        
//        stage Build learning.
//           println ANSI_BOLD + ANSI_GREEN + "Triggering KnowledgePlatform build.." + ANSI_NORMAL
//           lpbuild = build job: "AutoBuild/$envDir/$module/Learning", parameters: [string(name: 'github_release_tag', value: "$tag_name")]

//          if (lpbuild.currentResult == "SUCCESS") {
//        stage Build
            sh 'mvn clean package  -DskipTests -P samza-jobs'
        

//        stage Archive artifacts
            sh """
                        mkdir lp_yarn_artifacts
                        cp platform-jobs/samza/distribution/target/distribution-*.tar.gz lp_yarn_artifacts
                        zip -j lp_yarn_artifacts.zip:${artifact_version} lp_yarn_artifacts/*
                    """
            archiveArtifacts artifacts: "lp_yarn_artifacts.zip:${artifact_version}", fingerprint: true, onlyIfSuccessful: true
            sh """echo {\\"artifact_name\\" : \\"lp_yarn_artifacts.zip\\", \\"artifact_version\\" : \\"${artifact_version}\\", \\"node_name\\" : \\"${env.NODE_NAME}\\"} > metadata.json"""
            archiveArtifacts artifacts: 'metadata.json', onlyIfSuccessful: true
            currentBuild.result = "SUCCESS"
            currentBuild.description = "Artifact: ${artifact_version}, Public: ${params.github_release_tag}"
        
        currentBuild.result = "SUCCESS"    
        slack_notify(currentBuild.result, tag_name)
        email_notify()  
        auto_build_deploy()
//     }
//     else {
//              println (ANSI_BOLD + ANSI_RED + "knowledge platform build failed. Skipping build" + ANSI_NORMAL)
//              error "knowledge platform build failed"
//           }
        
    }
    catch (err) {
        currentBuild.result = "FAILURE"
        slack_notify(currentBuild.result, tag_name)
        email_notify()
        throw err
    }
}
