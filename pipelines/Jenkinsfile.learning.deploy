@Library('deploy-conf') _
node() {
    try {
        String ANSI_GREEN = "\u001B[32m"
        String ANSI_NORMAL = "\u001B[0m"
        String ANSI_BOLD = "\u001B[1m"
        String ANSI_RED = "\u001B[31m"
        String ANSI_YELLOW = "\u001B[33m"

        stage('checkout public repo') {
            cleanWs()
            checkout scm
        }
        stage('define params') {
            def values = lp_dp_params()
            if(values == "first run"){
                currentBuild.result = 'SUCCESS'
                return
            }
            ansiColor('xterm') {
                stage('get artifact') {
                    if (params.artifact_source == "Remote") {
                        println(ANSI_BOLD + ANSI_YELLOW + '''\
                    Option chosen is Remote, ignoring any previously copied artifacts and new artifacts will be downloaded from remote source
                    '''.stripIndent().replace("\n", " ") + ANSI_NORMAL)
                        currentWs = sh(returnStdout: true, script: 'pwd').trim()
                        artifact = values.artifact_name + ":" + values.artifact_version
                        ansiblePlaybook = "${currentWs}/devops/artifacts-download.yml"
                        ansibleExtraArgs = """\
                               --extra-vars "artifact=${artifact}
                               artifact_path=${currentWs}/${artifact}"
                               --vault-password-file /home/ops/vault
                               """.stripIndent().replace("\n", " ")
                        values.put('currentWs', currentWs)
                        values.put('ansiblePlaybook', ansiblePlaybook)
                        values.put('ansibleExtraArgs', ansibleExtraArgs)
                        ansible_playbook_run(values)
                    }
                    else{
                        println(ANSI_BOLD + ANSI_YELLOW + '''\
                    Option chosen is Local, using the artifacts copied 
                    '''.stripIndent().replace("\n", " ") + ANSI_NORMAL)
                    }
                }
                stage('deploy artifact'){
                    sh """
                       unzip ${artifact}
                       mv learning-service.war devops
                    """
                    ansiblePlaybook = "${currentWs}/devops/lp_cassandra_db_update.yml"
                    ansibleExtraArgs = ""
                    values.put('currentWs', currentWs)
                    values.put('ansiblePlaybook', ansiblePlaybook)
                    values.put('ansibleExtraArgs', ansibleExtraArgs)
                    println values
//                    ansible_playbook_run(values)

                    ansiblePlaybook = "${currentWs}/devops/lp_learning_deploy.yml"
                    ansibleExtraArgs = "--vault-password-file /home/ops/vault"
                    values.put('currentWs', currentWs)
                    values.put('ansiblePlaybook', ansiblePlaybook)
                    values.put('ansibleExtraArgs', ansibleExtraArgs)
                    println values
//                    ansible_playbook_run(values)

                    ansiblePlaybook = "${currentWs}/devops/lp_logstash_deploy.yml"
                    ansibleExtraArgs = "--extra-vars \"remote=learningall\" --vault-password-file /home/ops/vault"
                    values.put('currentWs', currentWs)
                    values.put('ansiblePlaybook', ansiblePlaybook)
                    values.put('ansibleExtraArgs', ansibleExtraArgs)
                    println values
//                    ansible_playbook_run(values)
                    archiveArtifacts artifacts: "lp_artifacts.zip:${values.artifact_version}", fingerprint: true, onlyIfSuccessful: true
                    archiveArtifacts artifacts: 'metadata.json', onlyIfSuccessful: true
                }
            }
        }
    }
    catch (err) {
        throw err
    }
}
